{"message":"unused import: `Tz`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/handlers/organizations.rs","byte_start":324,"byte_end":326,"line_start":9,"line_end":9,"column_start":23,"column_end":25,"is_primary":true,"text":[{"text":"use rrule::{RRuleSet, Tz};","highlight_start":23,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/handlers/organizations.rs","byte_start":322,"byte_end":326,"line_start":9,"line_end":9,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"use rrule::{RRuleSet, Tz};","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Tz`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/handlers/organizations.rs:9:23\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rrule::{RRuleSet, Tz};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `HeaderValue`, `Response`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/handlers/users.rs","byte_start":57,"byte_end":68,"line_start":1,"line_end":1,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"use axum::{http::{StatusCode,header::{SET_COOKIE, self}, HeaderValue}, response::{IntoResponse, Response}, Json, extract::{State, self}, Extension};","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/handlers/users.rs","byte_start":96,"byte_end":104,"line_start":1,"line_end":1,"column_start":97,"column_end":105,"is_primary":true,"text":[{"text":"use axum::{http::{StatusCode,header::{SET_COOKIE, self}, HeaderValue}, response::{IntoResponse, Response}, Json, extract::{State, self}, Extension};","highlight_start":97,"highlight_end":105}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/handlers/users.rs","byte_start":55,"byte_end":68,"line_start":1,"line_end":1,"column_start":56,"column_end":69,"is_primary":true,"text":[{"text":"use axum::{http::{StatusCode,header::{SET_COOKIE, self}, HeaderValue}, response::{IntoResponse, Response}, Json, extract::{State, self}, Extension};","highlight_start":56,"highlight_end":69}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/handlers/users.rs","byte_start":94,"byte_end":104,"line_start":1,"line_end":1,"column_start":95,"column_end":105,"is_primary":true,"text":[{"text":"use axum::{http::{StatusCode,header::{SET_COOKIE, self}, HeaderValue}, response::{IntoResponse, Response}, Json, extract::{State, self}, Extension};","highlight_start":95,"highlight_end":105}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `HeaderValue`, `Response`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/handlers/users.rs:1:58\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse axum::{http::{StatusCode,header::{SET_COOKIE, self}, HeaderValue}, response::{IntoResponse, Response}, Json, extract::{State, self}, \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"message":"the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/handlers/organizations.rs","byte_start":11810,"byte_end":11811,"line_start":320,"line_end":320,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"                    })?;","highlight_start":23,"highlight_end":24}],"label":"cannot use the `?` operator in an async function that returns `Response<http_body::combinators::box_body::UnsyncBoxBody<axum::body::Bytes, axum::Error>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/handlers/organizations.rs","byte_start":11810,"byte_end":11811,"line_start":320,"line_end":320,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"                    })?;","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/handlers/organizations.rs","byte_start":9795,"byte_end":12324,"line_start":280,"line_end":334,"column_start":24,"column_end":2,"is_primary":false,"text":[{"text":") -> impl IntoResponse {","highlight_start":24,"highlight_end":25},{"text":"    // Parse the RRuleSet from the payload's rrule string","highlight_start":1,"highlight_end":58},{"text":"    let rrule_set: RRuleSet = payload.rrule.parse().unwrap_or_else(|_| panic!(\"Failed to parse RRule string\"));","highlight_start":1,"highlight_end":112},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Generate occurrences with a limit to avoid infinite loops","highlight_start":1,"highlight_end":65},{"text":"    let limit = 100;","highlight_start":1,"highlight_end":21},{"text":"    let occurrences = rrule_set.all(limit).dates;","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    for &occurrence in &occurrences {","highlight_start":1,"highlight_end":38},{"text":"        // Directly use organization_id and location_id as they are already Uuids","highlight_start":1,"highlight_end":82},{"text":"        let shift_result = sqlx::query!(","highlight_start":1,"highlight_end":41},{"text":"            \"INSERT INTO shifts (organization_id, location_id, start_timestamp, end_timestamp, notes) VALUES ($1, $2, $3, $4, $5) RETURNING id\",","highlight_start":1,"highlight_end":145},{"text":"            payload.organization_id,","highlight_start":1,"highlight_end":37},{"text":"            payload.location_id,","highlight_start":1,"highlight_end":33},{"text":"            occurrence,","highlight_start":1,"highlight_end":24},{"text":"            occurrence + (payload.end_time - payload.start_time), // This line may need adjustment based on how you calculate the end time for each occurrence","highlight_start":1,"highlight_end":159},{"text":"            payload.notes","highlight_start":1,"highlight_end":26},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"        .fetch_one(&*pool)","highlight_start":1,"highlight_end":27},{"text":"        .await;","highlight_start":1,"highlight_end":16},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"        match shift_result {","highlight_start":1,"highlight_end":29},{"text":"            Ok(record) => {","highlight_start":1,"highlight_end":28},{"text":"                let shift_id = record.id; // Assuming `id` is the name of the column in your RETURNING clause","highlight_start":1,"highlight_end":110},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"                // Use `shift_id` for your staff assignments, converting assigned_staff member IDs from String to Uuid","highlight_start":1,"highlight_end":119},{"text":"                for staff_id_str in &payload.assigned_staff {","highlight_start":1,"highlight_end":62},{"text":"                    let staff_id = staff_id_str.parse::<Uuid>()","highlight_start":1,"highlight_end":64},{"text":"                        .expect(\"Failed to parse staff_id into Uuid\");","highlight_start":1,"highlight_end":71},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    let _ = sqlx::query!(","highlight_start":1,"highlight_end":42},{"text":"                        \"INSERT INTO shift_org_staff (shift_id, org_staff_id) VALUES ($1, $2)\",","highlight_start":1,"highlight_end":96},{"text":"                        shift_id,","highlight_start":1,"highlight_end":34},{"text":"                        staff_id","highlight_start":1,"highlight_end":33},{"text":"                    )","highlight_start":1,"highlight_end":22},{"text":"                    .execute(&*pool)","highlight_start":1,"highlight_end":37},{"text":"                    .await","highlight_start":1,"highlight_end":27},{"text":"                    .map_err(|e| {","highlight_start":1,"highlight_end":35},{"text":"                        eprintln!(\"Failed to assign staff to shift: {:?}\", e);","highlight_start":1,"highlight_end":79},{"text":"                        return (StatusCode::INTERNAL_SERVER_ERROR, format!(\"Failed to assign staff: {}\", e)).into_response();","highlight_start":1,"highlight_end":126},{"text":"                    })?;","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(e) => {","highlight_start":1,"highlight_end":24},{"text":"                eprintln!(\"Failed to insert shift: {:?}\", e);","highlight_start":1,"highlight_end":62},{"text":"                return (StatusCode::INTERNAL_SERVER_ERROR, format!(\"Failed to create shift: {}\", e)).into_response();","highlight_start":1,"highlight_end":118},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    // Optionally handle assigned staff","highlight_start":1,"highlight_end":40},{"text":"    // For each `occurrence`, you might need to create associations in `org_staff_shifts` table","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (StatusCode::OK, format!(\"Successfully created {} shifts.\", occurrences.len())).into_response()","highlight_start":1,"highlight_end":100},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"this function should return `Result` or `Option` to accept `?`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `FromResidual<Result<Infallible, Response<http_body::combinators::box_body::UnsyncBoxBody<axum::body::Bytes, axum::Error>>>>` is not implemented for `Response<http_body::combinators::box_body::UnsyncBoxBody<axum::body::Bytes, axum::Error>>`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/handlers/organizations.rs:320:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m280\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m) -> impl IntoResponse {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m________________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Parse the RRuleSet from the payload's rrule string\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let rrule_set: RRuleSet = payload.rrule.parse().unwrap_or_else(|_| panic!(\"Failed to parse RRule string\"));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    })?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot use the `?` operator in an async function that returns `Response<http_body::combinators::box_body::UnsyncBoxBody<axum::body::Bytes, axum::Error>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (StatusCode::OK, format!(\"Successfully created {} shifts.\", occurrences.len())).into_response()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function should return `Result` or `Option` to accept `?`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `FromResidual<Result<Infallible, Response<http_body::combinators::box_body::UnsyncBoxBody<axum::body::Bytes, axum::Error>>>>` is not implemented for `Response<http_body::combinators::box_body::UnsyncBoxBody<axum::body::Bytes, axum::Error>>`\u001b[0m\n\n"}
{"message":"unused import: `Executor`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/handlers/organizations.rs","byte_start":225,"byte_end":233,"line_start":5,"line_end":5,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"use sqlx::{PgPool, Row, Executor};","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Executor`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/handlers/organizations.rs:5:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse sqlx::{PgPool, Row, Executor};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to previous error; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error; 3 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
